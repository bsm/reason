// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reason.proto

package reason // import "github.com/bsm/reason"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Kind identifies the feature type.
type Feature_Kind int32

const (
	Feature_NUMERICAL   Feature_Kind = 0
	Feature_CATEGORICAL Feature_Kind = 1
)

var Feature_Kind_name = map[int32]string{
	0: "NUMERICAL",
	1: "CATEGORICAL",
}
var Feature_Kind_value = map[string]int32{
	"NUMERICAL":   0,
	"CATEGORICAL": 1,
}

func (x Feature_Kind) String() string {
	return proto.EnumName(Feature_Kind_name, int32(x))
}
func (Feature_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_core_564ffdfa03f4c476, []int{1, 0}
}

// Strategies apply to categorical features and define how
// fact value are converted to numeric category indices.
type Feature_Strategy int32

const (
	// This is the default strategy where categories are calculated as
	// the index of the value in the vocabulary list. This strategy can
	// be used in combination with HashBuckets to look up values outside
	// the vocabulary.
	Feature_VOCABULARY Feature_Strategy = 0
	// Categorical feature with an identity simply use the numeric fact
	// values s the category.
	Feature_IDENTITY Feature_Strategy = 1
	// Like VOCABULARY this uses a vocabulary but - instead of referring to
	// HashBuckets - unknown values are appended to the vocabulary list.
	// Please use this option with care as there is no limitation for growth.
	Feature_EXPANDABLE Feature_Strategy = 2
)

var Feature_Strategy_name = map[int32]string{
	0: "VOCABULARY",
	1: "IDENTITY",
	2: "EXPANDABLE",
}
var Feature_Strategy_value = map[string]int32{
	"VOCABULARY": 0,
	"IDENTITY":   1,
	"EXPANDABLE": 2,
}

func (x Feature_Strategy) String() string {
	return proto.EnumName(Feature_Strategy_name, int32(x))
}
func (Feature_Strategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_core_564ffdfa03f4c476, []int{1, 1}
}

// Model describes a set of features
type Model struct {
	Features             map[string]*Feature `protobuf:"bytes,1,rep,name=features" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_564ffdfa03f4c476, []int{0}
}
func (m *Model) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Model.Unmarshal(m, b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Model.Marshal(b, m, deterministic)
}
func (dst *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(dst, src)
}
func (m *Model) XXX_Size() int {
	return xxx_messageInfo_Model.Size(m)
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

// Feature is an attribute of a fact/example.
type Feature struct {
	// The name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The kind.
	Kind Feature_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=blacksquaremedia.reason.reason.Feature_Kind" json:"kind,omitempty"`
	// The categorical bucketing strategy.
	Strategy Feature_Strategy `protobuf:"varint,3,opt,name=strategy,proto3,enum=blacksquaremedia.reason.reason.Feature_Strategy" json:"strategy,omitempty"`
	// List of known fact values.
	Vocabulary []string `protobuf:"bytes,4,rep,name=vocabulary" json:"vocabulary,omitempty"`
	// Defines the number of hash buckets used by hashed
	// categorical features.
	HashBuckets          uint32   `protobuf:"varint,5,opt,name=hash_buckets,json=hashBuckets,proto3" json:"hash_buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_564ffdfa03f4c476, []int{1}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (dst *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(dst, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Model)(nil), "blacksquaremedia.reason.reason.Model")
	proto.RegisterMapType((map[string]*Feature)(nil), "blacksquaremedia.reason.reason.Model.FeaturesEntry")
	proto.RegisterType((*Feature)(nil), "blacksquaremedia.reason.reason.Feature")
	proto.RegisterEnum("blacksquaremedia.reason.reason.Feature_Kind", Feature_Kind_name, Feature_Kind_value)
	proto.RegisterEnum("blacksquaremedia.reason.reason.Feature_Strategy", Feature_Strategy_name, Feature_Strategy_value)
}

func init() { proto.RegisterFile("reason.proto", fileDescriptor_core_564ffdfa03f4c476) }

var fileDescriptor_core_564ffdfa03f4c476 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xfd, 0xa3, 0xed, 0xe9, 0x76, 0x37, 0xcc, 0x55, 0xa8, 0x12, 0x62, 0x41, 0x09,
	0x82, 0x53, 0xac, 0x37, 0x8b, 0x82, 0x90, 0x74, 0xa3, 0x54, 0xdb, 0xee, 0x32, 0xb6, 0xe2, 0x7a,
	0x23, 0x93, 0x74, 0xb6, 0x2d, 0x6d, 0x32, 0x3a, 0x93, 0x2c, 0xe4, 0x2d, 0x7c, 0x1e, 0x9f, 0xc0,
	0x2b, 0xf1, 0xd2, 0xdb, 0x65, 0x5f, 0x44, 0x32, 0x89, 0xcb, 0x7a, 0xb1, 0xcb, 0xde, 0x84, 0x33,
	0xdf, 0x39, 0xdf, 0xef, 0x9c, 0xc0, 0x07, 0x07, 0x91, 0x90, 0x7c, 0x50, 0x7c, 0xc8, 0x57, 0x29,
	0x52, 0x81, 0x1f, 0x86, 0x3b, 0x16, 0x6d, 0xd5, 0xb7, 0x8c, 0x49, 0x1e, 0xf3, 0xe5, 0x86, 0x11,
	0xc9, 0x99, 0x12, 0x09, 0x29, 0x66, 0x7a, 0xcf, 0x56, 0x9b, 0x74, 0x9d, 0x85, 0x24, 0x12, 0xf1,
	0x60, 0x25, 0x56, 0x62, 0xa0, 0x4d, 0x61, 0x76, 0xa6, 0x5f, 0xfa, 0xa1, 0xab, 0x12, 0xd6, 0xff,
	0x81, 0xa0, 0x39, 0x15, 0x4b, 0xbe, 0xc3, 0x53, 0x68, 0x9d, 0x71, 0x96, 0x66, 0x92, 0x2b, 0x0b,
	0x39, 0x75, 0xb7, 0x33, 0x7c, 0x4e, 0x6e, 0xdb, 0x44, 0xb4, 0x8d, 0xbc, 0xa9, 0x3c, 0x41, 0x92,
	0xca, 0x9c, 0x5e, 0x21, 0x7a, 0x21, 0x74, 0xff, 0x6b, 0x61, 0x13, 0xea, 0x5b, 0x9e, 0x5b, 0xc8,
	0x41, 0x6e, 0x9b, 0x16, 0x25, 0x7e, 0x05, 0xcd, 0x73, 0xb6, 0xcb, 0xb8, 0x55, 0x73, 0x90, 0xdb,
	0x19, 0x3e, 0xbe, 0x7d, 0x5d, 0x45, 0xa3, 0xa5, 0xe7, 0x65, 0xed, 0x10, 0xf5, 0x7f, 0xd5, 0xe0,
	0x7e, 0x25, 0x63, 0x0c, 0x8d, 0x84, 0xc5, 0xbc, 0xe2, 0xeb, 0x1a, 0xbf, 0x86, 0xc6, 0x76, 0x93,
	0x2c, 0x35, 0x7f, 0x7f, 0xf8, 0xf4, 0x4e, 0x7c, 0xf2, 0x7e, 0x93, 0x2c, 0xa9, 0xf6, 0xe1, 0x77,
	0xd0, 0x52, 0xa9, 0x64, 0x29, 0x5f, 0xe5, 0x56, 0x5d, 0x33, 0xc8, 0xdd, 0x18, 0x1f, 0x2a, 0x17,
	0xbd, 0xf2, 0x63, 0x1b, 0xe0, 0x5c, 0x44, 0x2c, 0xcc, 0x76, 0x4c, 0xe6, 0x56, 0xc3, 0xa9, 0xbb,
	0x6d, 0x7a, 0x4d, 0xc1, 0x8f, 0x60, 0x6f, 0xcd, 0xd4, 0xfa, 0x4b, 0x98, 0x45, 0x5b, 0x9e, 0x2a,
	0xab, 0xe9, 0x20, 0xb7, 0x4b, 0x3b, 0x85, 0xe6, 0x97, 0x52, 0xff, 0x09, 0x34, 0x8a, 0xe3, 0x70,
	0x17, 0xda, 0xb3, 0xc5, 0x34, 0xa0, 0xe3, 0x91, 0x37, 0x31, 0x0d, 0x7c, 0x00, 0x9d, 0x91, 0x37,
	0x0f, 0xde, 0x1e, 0x97, 0x02, 0xea, 0x1f, 0x42, 0xeb, 0xdf, 0x01, 0x78, 0x1f, 0xe0, 0xe3, 0xf1,
	0xc8, 0xf3, 0x17, 0x13, 0x8f, 0x9e, 0x9a, 0x06, 0xde, 0x83, 0xd6, 0xf8, 0x28, 0x98, 0xcd, 0xc7,
	0xf3, 0x53, 0x13, 0x15, 0xdd, 0xe0, 0xd3, 0x89, 0x37, 0x3b, 0xf2, 0xfc, 0x49, 0x60, 0xd6, 0xfc,
	0xc5, 0xcf, 0x0b, 0xdb, 0xf8, 0x73, 0x61, 0xa3, 0xef, 0x97, 0xb6, 0xf1, 0xfb, 0xd2, 0x36, 0xe0,
	0x41, 0x24, 0xe2, 0x9b, 0xfe, 0xd9, 0x87, 0x91, 0x90, 0xfc, 0xa4, 0xc8, 0x91, 0xfa, 0xdc, 0xbb,
	0x96, 0xbb, 0x50, 0xc5, 0x83, 0x72, 0x44, 0xe7, 0x36, 0xbc, 0xa7, 0xb3, 0xf6, 0xe2, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xac, 0xa2, 0x51, 0xe9, 0xcb, 0x02, 0x00, 0x00,
}
