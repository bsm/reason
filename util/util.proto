syntax = "proto3";

package blacksquaremedia.reason.util;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_stringer_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

option go_package = "github.com/bsm/reason/util";
option java_package = "com.blacksquaremedia.reason";
option java_outer_classname = "UtilProtos";

// Vector is an auto-expanding a vector data type.
message Vector {
  repeated double data = 1 [packed=true];
}

// Matrix is an auto-expanding matrix data type.
message Matrix {
  uint32 stride = 1;
  repeated double data = 2 [packed=true];
}

// NumStream allows to extract statistical information from
// a stream of numbers in a single-pass.
message NumStream {
  double weight = 1;
  double sum = 2;
  double sum_squares = 3;
  double min = 4;
  double max = 5;
}

// NumStreams is an auto-expanding NumStream distribution.
message NumStreams {
  repeated NumStream data = 1 [(gogoproto.nullable)=false];
}

// NumStreamBuckets maintain NumStream information
// in fixed-size buckets.
message NumStreamBuckets {
  message Bucket {
    double threshold = 1;
    NumStream stream = 2 [(gogoproto.nullable)=false, (gogoproto.embed)=true];
  }

  uint32 max_buckets = 1;
  repeated Bucket buckets = 2 [(gogoproto.nullable)=false];
}

// Histogram is a probabilistic, fixed-size data structure, able to
// accommodate massive data streams while predicting distributions
// and quantiles much more accurately than a sample-based approach.
message Histogram {
  message Bin {
    double value = 1;
    double weight = 2;
  }

  double weight = 1;
  uint32 cap = 2;
  double min = 3;
  double max = 4;
  repeated Bin bins = 5 [(gogoproto.nullable)=false];
}
