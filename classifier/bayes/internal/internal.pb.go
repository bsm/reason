// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: classifier/bayes/internal/internal.proto

package internal // import "github.com/bsm/reason/classifier/ftrl/internal"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import observer "github.com/bsm/reason/common/observer"
import core "github.com/bsm/reason/core"
import util "github.com/bsm/reason/util"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NaiveBayes wraps a Naive Bayes classifier.
type NaiveBayes struct {
	// The underlying model.
	Model *core.Model `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// The target feature.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Stats, by target category.
	TargetStats util.Vector `protobuf:"bytes,3,opt,name=target_stats,json=targetStats" json:"target_stats"`
	// Observer stats, by feature.
	FeatureStats         map[string]*NaiveBayes_Observer `protobuf:"bytes,4,rep,name=feature_stats,json=featureStats" json:"feature_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
}

func (m *NaiveBayes) Reset()         { *m = NaiveBayes{} }
func (m *NaiveBayes) String() string { return proto.CompactTextString(m) }
func (*NaiveBayes) ProtoMessage()    {}
func (*NaiveBayes) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_a8fd9dfba513d655, []int{0}
}
func (m *NaiveBayes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NaiveBayes.Unmarshal(m, b)
}
func (m *NaiveBayes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NaiveBayes.Marshal(b, m, deterministic)
}
func (dst *NaiveBayes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NaiveBayes.Merge(dst, src)
}
func (m *NaiveBayes) XXX_Size() int {
	return xxx_messageInfo_NaiveBayes.Size(m)
}
func (m *NaiveBayes) XXX_DiscardUnknown() {
	xxx_messageInfo_NaiveBayes.DiscardUnknown(m)
}

var xxx_messageInfo_NaiveBayes proto.InternalMessageInfo

// Observer instances maintain information based on
// observation of a particular feature.
type NaiveBayes_Observer struct {
	// Types that are valid to be assigned to Kind:
	//	*NaiveBayes_Observer_Num
	//	*NaiveBayes_Observer_Cat
	Kind                 isNaiveBayes_Observer_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
}

func (m *NaiveBayes_Observer) Reset()         { *m = NaiveBayes_Observer{} }
func (m *NaiveBayes_Observer) String() string { return proto.CompactTextString(m) }
func (*NaiveBayes_Observer) ProtoMessage()    {}
func (*NaiveBayes_Observer) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_a8fd9dfba513d655, []int{0, 0}
}
func (m *NaiveBayes_Observer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NaiveBayes_Observer.Unmarshal(m, b)
}
func (m *NaiveBayes_Observer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NaiveBayes_Observer.Marshal(b, m, deterministic)
}
func (dst *NaiveBayes_Observer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NaiveBayes_Observer.Merge(dst, src)
}
func (m *NaiveBayes_Observer) XXX_Size() int {
	return xxx_messageInfo_NaiveBayes_Observer.Size(m)
}
func (m *NaiveBayes_Observer) XXX_DiscardUnknown() {
	xxx_messageInfo_NaiveBayes_Observer.DiscardUnknown(m)
}

var xxx_messageInfo_NaiveBayes_Observer proto.InternalMessageInfo

type isNaiveBayes_Observer_Kind interface {
	isNaiveBayes_Observer_Kind()
}

type NaiveBayes_Observer_Num struct {
	Num *observer.ClassificationNumerical `protobuf:"bytes,1,opt,name=num,oneof"`
}
type NaiveBayes_Observer_Cat struct {
	Cat *observer.ClassificationCategorical `protobuf:"bytes,2,opt,name=cat,oneof"`
}

func (*NaiveBayes_Observer_Num) isNaiveBayes_Observer_Kind() {}
func (*NaiveBayes_Observer_Cat) isNaiveBayes_Observer_Kind() {}

func (m *NaiveBayes_Observer) GetKind() isNaiveBayes_Observer_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *NaiveBayes_Observer) GetNum() *observer.ClassificationNumerical {
	if x, ok := m.GetKind().(*NaiveBayes_Observer_Num); ok {
		return x.Num
	}
	return nil
}

func (m *NaiveBayes_Observer) GetCat() *observer.ClassificationCategorical {
	if x, ok := m.GetKind().(*NaiveBayes_Observer_Cat); ok {
		return x.Cat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NaiveBayes_Observer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NaiveBayes_Observer_OneofMarshaler, _NaiveBayes_Observer_OneofUnmarshaler, _NaiveBayes_Observer_OneofSizer, []interface{}{
		(*NaiveBayes_Observer_Num)(nil),
		(*NaiveBayes_Observer_Cat)(nil),
	}
}

func _NaiveBayes_Observer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NaiveBayes_Observer)
	// kind
	switch x := m.Kind.(type) {
	case *NaiveBayes_Observer_Num:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Num); err != nil {
			return err
		}
	case *NaiveBayes_Observer_Cat:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NaiveBayes_Observer.Kind has unexpected type %T", x)
	}
	return nil
}

func _NaiveBayes_Observer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NaiveBayes_Observer)
	switch tag {
	case 1: // kind.num
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(observer.ClassificationNumerical)
		err := b.DecodeMessage(msg)
		m.Kind = &NaiveBayes_Observer_Num{msg}
		return true, err
	case 2: // kind.cat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(observer.ClassificationCategorical)
		err := b.DecodeMessage(msg)
		m.Kind = &NaiveBayes_Observer_Cat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NaiveBayes_Observer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NaiveBayes_Observer)
	// kind
	switch x := m.Kind.(type) {
	case *NaiveBayes_Observer_Num:
		s := proto.Size(x.Num)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NaiveBayes_Observer_Cat:
		s := proto.Size(x.Cat)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NaiveBayes)(nil), "blacksquaremedia.reason.classifier.bayes.NaiveBayes")
	proto.RegisterMapType((map[string]*NaiveBayes_Observer)(nil), "blacksquaremedia.reason.classifier.bayes.NaiveBayes.FeatureStatsEntry")
	proto.RegisterType((*NaiveBayes_Observer)(nil), "blacksquaremedia.reason.classifier.bayes.NaiveBayes.Observer")
}

func init() {
	proto.RegisterFile("classifier/bayes/internal/internal.proto", fileDescriptor_internal_a8fd9dfba513d655)
}

var fileDescriptor_internal_a8fd9dfba513d655 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x37, 0xcd, 0x76, 0xb1, 0x93, 0x4a, 0x35, 0x07, 0x59, 0xf6, 0x10, 0x17, 0x15, 0xc9,
	0xc5, 0x19, 0x58, 0x2f, 0x2a, 0x08, 0x92, 0x62, 0xf1, 0xd2, 0x2a, 0xa9, 0xf4, 0xe0, 0x45, 0x26,
	0xb3, 0x2f, 0x71, 0xd8, 0x4c, 0x46, 0xe7, 0xc7, 0xc2, 0x5e, 0xfc, 0x1b, 0xfc, 0x93, 0x3c, 0xf6,
	0xe8, 0xd1, 0x53, 0xa1, 0xf4, 0x1f, 0x91, 0x99, 0x89, 0xbb, 0x0b, 0x52, 0x29, 0xbd, 0x84, 0xf7,
	0x5e, 0xde, 0xfb, 0xcc, 0x7b, 0xdf, 0x79, 0x83, 0x72, 0xd6, 0x52, 0xad, 0x79, 0xcd, 0x41, 0x91,
	0x8a, 0xae, 0x40, 0x13, 0xde, 0x19, 0x50, 0x1d, 0x6d, 0xd7, 0x06, 0xfe, 0xaa, 0xa4, 0x91, 0x69,
	0x5e, 0xb5, 0x94, 0x2d, 0xf4, 0x37, 0x4b, 0x15, 0x08, 0x98, 0x73, 0x8a, 0x15, 0x50, 0x2d, 0x3b,
	0xbc, 0x21, 0x60, 0x4f, 0x98, 0x1c, 0x30, 0xa9, 0x80, 0xb8, 0x4f, 0x28, 0x9d, 0x1c, 0x58, 0xc3,
	0x5b, 0xe2, 0x3e, 0x7d, 0x20, 0x63, 0x52, 0x08, 0xd9, 0x11, 0x59, 0x69, 0x50, 0x4b, 0x50, 0x6b,
	0xa3, 0xff, 0xff, 0xac, 0xe1, 0xe6, 0x8b, 0xad, 0x30, 0x93, 0x82, 0x34, 0xb2, 0x91, 0xc4, 0x87,
	0x2b, 0x5b, 0x7b, 0xcf, 0x3b, 0xde, 0x0a, 0xe9, 0x8f, 0x2e, 0x86, 0x08, 0x9d, 0x50, 0xbe, 0x84,
	0xc2, 0x9d, 0x9f, 0xbe, 0x44, 0xbb, 0x42, 0xce, 0xa1, 0x1d, 0x47, 0xd3, 0x28, 0x4f, 0x66, 0x8f,
	0xf1, 0xb5, 0x9d, 0xbb, 0x16, 0x8f, 0x5d, 0x6a, 0x19, 0x2a, 0xd2, 0x07, 0x68, 0x64, 0xa8, 0x6a,
	0xc0, 0x8c, 0x77, 0xa6, 0x51, 0xbe, 0x57, 0xf6, 0x5e, 0x7a, 0x8c, 0xf6, 0x83, 0xf5, 0x59, 0x1b,
	0x6a, 0xf4, 0x38, 0xf6, 0xe4, 0x27, 0xd7, 0x92, 0xfd, 0xac, 0x67, 0xc0, 0x8c, 0x54, 0xc5, 0xf0,
	0xfc, 0xe2, 0xe1, 0xa0, 0x4c, 0x42, 0xfd, 0xa9, 0x2b, 0x4f, 0x17, 0xe8, 0x6e, 0x0d, 0xd4, 0x58,
	0x05, 0x3d, 0x6f, 0x38, 0x8d, 0xf3, 0x64, 0x76, 0x84, 0x6f, 0xaa, 0x31, 0xde, 0x8c, 0x8b, 0x8f,
	0x02, 0xc9, 0x93, 0xdf, 0x76, 0x46, 0xad, 0xca, 0xfd, 0x7a, 0x2b, 0x34, 0xf9, 0x19, 0xa1, 0x3b,
	0xef, 0x7b, 0x7d, 0xd3, 0x8f, 0x28, 0xee, 0xac, 0xe8, 0x95, 0x79, 0xf3, 0x1f, 0x65, 0xdc, 0xfd,
	0xe0, 0xf5, 0xb5, 0x1c, 0xf6, 0xe7, 0x33, 0x6a, 0xb8, 0xec, 0x4e, 0xac, 0x00, 0xc5, 0x19, 0x6d,
	0xdf, 0x0d, 0x4a, 0x87, 0x4b, 0xcf, 0x50, 0xcc, 0x68, 0xd0, 0x2c, 0x99, 0x15, 0xb7, 0xa4, 0x1e,
	0x52, 0x03, 0x8d, 0x5c, 0x73, 0x19, 0x35, 0xc5, 0x08, 0x0d, 0x17, 0xbc, 0x9b, 0x4f, 0xbe, 0xa3,
	0xfb, 0xff, 0x4c, 0x99, 0xde, 0x43, 0xf1, 0x02, 0x56, 0x7e, 0x94, 0xbd, 0xd2, 0x99, 0xe9, 0x29,
	0xda, 0x5d, 0xd2, 0xd6, 0x42, 0xdf, 0xc8, 0xeb, 0x5b, 0xc9, 0xf9, 0x57, 0xaa, 0x32, 0xb0, 0x5e,
	0xed, 0xbc, 0x88, 0x0a, 0x7b, 0x7e, 0x99, 0x0d, 0x7e, 0x5f, 0x66, 0xd1, 0x8f, 0xab, 0x6c, 0xf0,
	0xeb, 0x2a, 0x1b, 0xa0, 0xa7, 0x4c, 0x8a, 0x1b, 0xe0, 0x8b, 0xc4, 0x43, 0x3f, 0xb8, 0x35, 0xd5,
	0x9f, 0xf0, 0xd6, 0x5a, 0x57, 0x5a, 0x90, 0x90, 0x4e, 0xb6, 0x9e, 0x60, 0x6d, 0xd4, 0xe6, 0xe1,
	0x55, 0x23, 0xbf, 0xde, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x77, 0x8d, 0xea, 0x37, 0xa5,
	0x03, 0x00, 0x00,
}
