// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: classifier/hoeffding/internal/internal.proto

package internal // import "github.com/bsm/reason/classifier/hoeffding/internal"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import observer "github.com/bsm/reason/common/observer"
import core "github.com/bsm/reason/core"
import util "github.com/bsm/reason/util"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Tree wraps the tree data.
type Tree struct {
	// The underlying model.
	Model *core.Model `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// The target feature.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The root nodeRef.
	Root int64 `protobuf:"varint,3,opt,name=root,proto3" json:"root,omitempty"`
	// The node registry.
	Nodes                []*Node  `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}
func (*Tree) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{0}
}
func (m *Tree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tree.Unmarshal(m, b)
}
func (m *Tree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tree.Marshal(b, m, deterministic)
}
func (dst *Tree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tree.Merge(dst, src)
}
func (m *Tree) XXX_Size() int {
	return xxx_messageInfo_Tree.Size(m)
}
func (m *Tree) XXX_DiscardUnknown() {
	xxx_messageInfo_Tree.DiscardUnknown(m)
}

var xxx_messageInfo_Tree proto.InternalMessageInfo

// Node is a tree node
type Node struct {
	// Nodes can be leaf or split nodes.
	//
	// Types that are valid to be assigned to Kind:
	//	*Node_Leaf
	//	*Node_Split
	Kind isNode_Kind `protobuf_oneof:"kind"`
	// Observation stats for the node
	//
	// Types that are valid to be assigned to Stats:
	//	*Node_Classification
	//	*Node_Regression
	Stats                isNode_Stats `protobuf_oneof:"stats"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (dst *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(dst, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type isNode_Kind interface {
	isNode_Kind()
}
type isNode_Stats interface {
	isNode_Stats()
}

type Node_Leaf struct {
	Leaf *LeafNode `protobuf:"bytes,1,opt,name=leaf,oneof"`
}
type Node_Split struct {
	Split *SplitNode `protobuf:"bytes,2,opt,name=split,oneof"`
}
type Node_Classification struct {
	Classification *Node_ClassificationStats `protobuf:"bytes,3,opt,name=classification,oneof"`
}
type Node_Regression struct {
	Regression *Node_RegressionStats `protobuf:"bytes,4,opt,name=regression,oneof"`
}

func (*Node_Leaf) isNode_Kind()            {}
func (*Node_Split) isNode_Kind()           {}
func (*Node_Classification) isNode_Stats() {}
func (*Node_Regression) isNode_Stats()     {}

func (m *Node) GetKind() isNode_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}
func (m *Node) GetStats() isNode_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Node) GetLeaf() *LeafNode {
	if x, ok := m.GetKind().(*Node_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *Node) GetSplit() *SplitNode {
	if x, ok := m.GetKind().(*Node_Split); ok {
		return x.Split
	}
	return nil
}

func (m *Node) GetClassification() *Node_ClassificationStats {
	if x, ok := m.GetStats().(*Node_Classification); ok {
		return x.Classification
	}
	return nil
}

func (m *Node) GetRegression() *Node_RegressionStats {
	if x, ok := m.GetStats().(*Node_Regression); ok {
		return x.Regression
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_Leaf)(nil),
		(*Node_Split)(nil),
		(*Node_Classification)(nil),
		(*Node_Regression)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// kind
	switch x := m.Kind.(type) {
	case *Node_Leaf:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Leaf); err != nil {
			return err
		}
	case *Node_Split:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Split); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Node.Kind has unexpected type %T", x)
	}
	// stats
	switch x := m.Stats.(type) {
	case *Node_Classification:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Classification); err != nil {
			return err
		}
	case *Node_Regression:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Regression); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Node.Stats has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 1: // kind.leaf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LeafNode)
		err := b.DecodeMessage(msg)
		m.Kind = &Node_Leaf{msg}
		return true, err
	case 2: // kind.split
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SplitNode)
		err := b.DecodeMessage(msg)
		m.Kind = &Node_Split{msg}
		return true, err
	case 3: // stats.classification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node_ClassificationStats)
		err := b.DecodeMessage(msg)
		m.Stats = &Node_Classification{msg}
		return true, err
	case 4: // stats.regression
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node_RegressionStats)
		err := b.DecodeMessage(msg)
		m.Stats = &Node_Regression{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// kind
	switch x := m.Kind.(type) {
	case *Node_Leaf:
		s := proto.Size(x.Leaf)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Split:
		s := proto.Size(x.Split)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// stats
	switch x := m.Stats.(type) {
	case *Node_Classification:
		s := proto.Size(x.Classification)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Regression:
		s := proto.Size(x.Regression)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Stats for classifications.
type Node_ClassificationStats struct {
	util.Vector          `protobuf:"bytes,1,opt,name=stats,embedded=stats" json:"stats"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Node_ClassificationStats) Reset()         { *m = Node_ClassificationStats{} }
func (m *Node_ClassificationStats) String() string { return proto.CompactTextString(m) }
func (*Node_ClassificationStats) ProtoMessage()    {}
func (*Node_ClassificationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{1, 0}
}
func (m *Node_ClassificationStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node_ClassificationStats.Unmarshal(m, b)
}
func (m *Node_ClassificationStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node_ClassificationStats.Marshal(b, m, deterministic)
}
func (dst *Node_ClassificationStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_ClassificationStats.Merge(dst, src)
}
func (m *Node_ClassificationStats) XXX_Size() int {
	return xxx_messageInfo_Node_ClassificationStats.Size(m)
}
func (m *Node_ClassificationStats) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_ClassificationStats.DiscardUnknown(m)
}

var xxx_messageInfo_Node_ClassificationStats proto.InternalMessageInfo

// Stats for regressions.
type Node_RegressionStats struct {
	util.NumStream       `protobuf:"bytes,1,opt,name=stats,embedded=stats" json:"stats"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Node_RegressionStats) Reset()         { *m = Node_RegressionStats{} }
func (m *Node_RegressionStats) String() string { return proto.CompactTextString(m) }
func (*Node_RegressionStats) ProtoMessage()    {}
func (*Node_RegressionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{1, 1}
}
func (m *Node_RegressionStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node_RegressionStats.Unmarshal(m, b)
}
func (m *Node_RegressionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node_RegressionStats.Marshal(b, m, deterministic)
}
func (dst *Node_RegressionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_RegressionStats.Merge(dst, src)
}
func (m *Node_RegressionStats) XXX_Size() int {
	return xxx_messageInfo_Node_RegressionStats.Size(m)
}
func (m *Node_RegressionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_RegressionStats.DiscardUnknown(m)
}

var xxx_messageInfo_Node_RegressionStats proto.InternalMessageInfo

// SplitNode instances are intermediate nodes within the tree.
type SplitNode struct {
	// The feature name (predictor).
	Feature string `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	// The pivot value for binary splits (numerical predictors).
	Pivot float64 `protobuf:"fixed64,2,opt,name=pivot,proto3" json:"pivot,omitempty"`
	// The child references.
	Children             []int64  `protobuf:"varint,3,rep,packed,name=children" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *SplitNode) Reset()         { *m = SplitNode{} }
func (m *SplitNode) String() string { return proto.CompactTextString(m) }
func (*SplitNode) ProtoMessage()    {}
func (*SplitNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{2}
}
func (m *SplitNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitNode.Unmarshal(m, b)
}
func (m *SplitNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitNode.Marshal(b, m, deterministic)
}
func (dst *SplitNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitNode.Merge(dst, src)
}
func (m *SplitNode) XXX_Size() int {
	return xxx_messageInfo_SplitNode.Size(m)
}
func (m *SplitNode) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitNode.DiscardUnknown(m)
}

var xxx_messageInfo_SplitNode proto.InternalMessageInfo

// LeafNode instances are the leaves within the tree.
type LeafNode struct {
	// Observation stats, by feature.
	FeatureStats map[string]*LeafNode_Stats `protobuf:"bytes,1,rep,name=feature_stats,json=featureStats" json:"feature_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Weight at the time of the last split evaluation.
	WeightAtLastEval float64 `protobuf:"fixed64,2,opt,name=weight_at_last_eval,json=weightAtLastEval,proto3" json:"weight_at_last_eval,omitempty"`
	// Status indicator.
	IsDisabled           bool     `protobuf:"varint,3,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *LeafNode) Reset()         { *m = LeafNode{} }
func (m *LeafNode) String() string { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()    {}
func (*LeafNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{3}
}
func (m *LeafNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafNode.Unmarshal(m, b)
}
func (m *LeafNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafNode.Marshal(b, m, deterministic)
}
func (dst *LeafNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafNode.Merge(dst, src)
}
func (m *LeafNode) XXX_Size() int {
	return xxx_messageInfo_LeafNode.Size(m)
}
func (m *LeafNode) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafNode.DiscardUnknown(m)
}

var xxx_messageInfo_LeafNode proto.InternalMessageInfo

// Stats maintain information based on
// observation of a particular feature.
type LeafNode_Stats struct {
	// Types that are valid to be assigned to Kind:
	//	*LeafNode_Stats_CN
	//	*LeafNode_Stats_CC
	//	*LeafNode_Stats_RN
	//	*LeafNode_Stats_RC
	Kind                 isLeafNode_Stats_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
}

func (m *LeafNode_Stats) Reset()         { *m = LeafNode_Stats{} }
func (m *LeafNode_Stats) String() string { return proto.CompactTextString(m) }
func (*LeafNode_Stats) ProtoMessage()    {}
func (*LeafNode_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_5121f8bd377cc2c9, []int{3, 0}
}
func (m *LeafNode_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafNode_Stats.Unmarshal(m, b)
}
func (m *LeafNode_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafNode_Stats.Marshal(b, m, deterministic)
}
func (dst *LeafNode_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafNode_Stats.Merge(dst, src)
}
func (m *LeafNode_Stats) XXX_Size() int {
	return xxx_messageInfo_LeafNode_Stats.Size(m)
}
func (m *LeafNode_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafNode_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_LeafNode_Stats proto.InternalMessageInfo

type isLeafNode_Stats_Kind interface {
	isLeafNode_Stats_Kind()
}

type LeafNode_Stats_CN struct {
	CN *observer.ClassificationNumerical `protobuf:"bytes,1,opt,name=cn,oneof"`
}
type LeafNode_Stats_CC struct {
	CC *observer.ClassificationCategorical `protobuf:"bytes,2,opt,name=cc,oneof"`
}
type LeafNode_Stats_RN struct {
	RN *observer.RegressionNumerical `protobuf:"bytes,3,opt,name=rn,oneof"`
}
type LeafNode_Stats_RC struct {
	RC *observer.RegressionCategorical `protobuf:"bytes,4,opt,name=rc,oneof"`
}

func (*LeafNode_Stats_CN) isLeafNode_Stats_Kind() {}
func (*LeafNode_Stats_CC) isLeafNode_Stats_Kind() {}
func (*LeafNode_Stats_RN) isLeafNode_Stats_Kind() {}
func (*LeafNode_Stats_RC) isLeafNode_Stats_Kind() {}

func (m *LeafNode_Stats) GetKind() isLeafNode_Stats_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *LeafNode_Stats) GetCN() *observer.ClassificationNumerical {
	if x, ok := m.GetKind().(*LeafNode_Stats_CN); ok {
		return x.CN
	}
	return nil
}

func (m *LeafNode_Stats) GetCC() *observer.ClassificationCategorical {
	if x, ok := m.GetKind().(*LeafNode_Stats_CC); ok {
		return x.CC
	}
	return nil
}

func (m *LeafNode_Stats) GetRN() *observer.RegressionNumerical {
	if x, ok := m.GetKind().(*LeafNode_Stats_RN); ok {
		return x.RN
	}
	return nil
}

func (m *LeafNode_Stats) GetRC() *observer.RegressionCategorical {
	if x, ok := m.GetKind().(*LeafNode_Stats_RC); ok {
		return x.RC
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LeafNode_Stats) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LeafNode_Stats_OneofMarshaler, _LeafNode_Stats_OneofUnmarshaler, _LeafNode_Stats_OneofSizer, []interface{}{
		(*LeafNode_Stats_CN)(nil),
		(*LeafNode_Stats_CC)(nil),
		(*LeafNode_Stats_RN)(nil),
		(*LeafNode_Stats_RC)(nil),
	}
}

func _LeafNode_Stats_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LeafNode_Stats)
	// kind
	switch x := m.Kind.(type) {
	case *LeafNode_Stats_CN:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CN); err != nil {
			return err
		}
	case *LeafNode_Stats_CC:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CC); err != nil {
			return err
		}
	case *LeafNode_Stats_RN:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RN); err != nil {
			return err
		}
	case *LeafNode_Stats_RC:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RC); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LeafNode_Stats.Kind has unexpected type %T", x)
	}
	return nil
}

func _LeafNode_Stats_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LeafNode_Stats)
	switch tag {
	case 1: // kind.cn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(observer.ClassificationNumerical)
		err := b.DecodeMessage(msg)
		m.Kind = &LeafNode_Stats_CN{msg}
		return true, err
	case 2: // kind.cc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(observer.ClassificationCategorical)
		err := b.DecodeMessage(msg)
		m.Kind = &LeafNode_Stats_CC{msg}
		return true, err
	case 3: // kind.rn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(observer.RegressionNumerical)
		err := b.DecodeMessage(msg)
		m.Kind = &LeafNode_Stats_RN{msg}
		return true, err
	case 4: // kind.rc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(observer.RegressionCategorical)
		err := b.DecodeMessage(msg)
		m.Kind = &LeafNode_Stats_RC{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LeafNode_Stats_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LeafNode_Stats)
	// kind
	switch x := m.Kind.(type) {
	case *LeafNode_Stats_CN:
		s := proto.Size(x.CN)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LeafNode_Stats_CC:
		s := proto.Size(x.CC)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LeafNode_Stats_RN:
		s := proto.Size(x.RN)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LeafNode_Stats_RC:
		s := proto.Size(x.RC)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Tree)(nil), "blacksquaremedia.reason.classifier.hoeffding.Tree")
	proto.RegisterType((*Node)(nil), "blacksquaremedia.reason.classifier.hoeffding.Node")
	proto.RegisterType((*Node_ClassificationStats)(nil), "blacksquaremedia.reason.classifier.hoeffding.Node.ClassificationStats")
	proto.RegisterType((*Node_RegressionStats)(nil), "blacksquaremedia.reason.classifier.hoeffding.Node.RegressionStats")
	proto.RegisterType((*SplitNode)(nil), "blacksquaremedia.reason.classifier.hoeffding.SplitNode")
	proto.RegisterType((*LeafNode)(nil), "blacksquaremedia.reason.classifier.hoeffding.LeafNode")
	proto.RegisterMapType((map[string]*LeafNode_Stats)(nil), "blacksquaremedia.reason.classifier.hoeffding.LeafNode.FeatureStatsEntry")
	proto.RegisterType((*LeafNode_Stats)(nil), "blacksquaremedia.reason.classifier.hoeffding.LeafNode.Stats")
}

func init() {
	proto.RegisterFile("classifier/hoeffding/internal/internal.proto", fileDescriptor_internal_5121f8bd377cc2c9)
}

var fileDescriptor_internal_5121f8bd377cc2c9 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0x63, 0xc7, 0xde, 0xee, 0xbe, 0x00, 0x59, 0xa6, 0x08, 0x45, 0x39, 0x24, 0x51, 0x40,
	0x90, 0x43, 0x6b, 0x4b, 0xa9, 0xc4, 0x2f, 0x55, 0x08, 0x9c, 0xb6, 0xe4, 0xb0, 0x04, 0x34, 0x8b,
	0x2a, 0xb4, 0x45, 0x8a, 0x26, 0xe3, 0xb1, 0x33, 0x5a, 0xdb, 0x13, 0x66, 0xc6, 0x41, 0x3d, 0xc0,
	0xdf, 0xc0, 0x7f, 0xc3, 0x7f, 0x00, 0x3d, 0xf6, 0xc8, 0x69, 0xa5, 0xd2, 0x3f, 0x83, 0x0b, 0xf2,
	0xd8, 0x4e, 0xb3, 0xbb, 0x74, 0xd5, 0xe4, 0x62, 0xbd, 0x37, 0x9e, 0xf7, 0x79, 0x6f, 0xe6, 0x7d,
	0x67, 0x06, 0xee, 0xd0, 0x84, 0x28, 0xc5, 0x23, 0xce, 0xa4, 0xbf, 0x14, 0x2c, 0x8a, 0x42, 0x9e,
	0xc5, 0x3e, 0xcf, 0x34, 0x93, 0x19, 0x49, 0x36, 0x86, 0xb7, 0x92, 0x42, 0x0b, 0x74, 0x67, 0x91,
	0x10, 0x7a, 0xae, 0x7e, 0xce, 0x89, 0x64, 0x29, 0x0b, 0x39, 0xf1, 0x24, 0x23, 0x4a, 0x64, 0xde,
	0x2b, 0x8a, 0xb7, 0xa1, 0x74, 0xdb, 0x54, 0x48, 0xe6, 0x17, 0x9f, 0x32, 0xbc, 0xdb, 0xce, 0x35,
	0x4f, 0xfc, 0xe2, 0x53, 0x0d, 0xf4, 0xa8, 0x48, 0x53, 0x91, 0xf9, 0x62, 0xa1, 0x98, 0x5c, 0x33,
	0xb9, 0x31, 0xaa, 0xff, 0x77, 0x63, 0xae, 0x97, 0xf9, 0xc2, 0xa3, 0x22, 0xf5, 0x63, 0x11, 0x0b,
	0xdf, 0x0c, 0x2f, 0xf2, 0xc8, 0x78, 0xc6, 0x31, 0x56, 0x39, 0x7d, 0xf8, 0x87, 0x05, 0xce, 0x0f,
	0x92, 0x31, 0xf4, 0x39, 0xb8, 0xa9, 0x08, 0x59, 0xd2, 0xb1, 0x06, 0xd6, 0xa8, 0x35, 0xfe, 0xc0,
	0x7b, 0x6d, 0xdd, 0x45, 0x71, 0xdf, 0x16, 0x53, 0x71, 0x19, 0x81, 0xde, 0x87, 0x03, 0x4d, 0x64,
	0xcc, 0x74, 0xc7, 0x1e, 0x58, 0xa3, 0x23, 0x5c, 0x79, 0x08, 0x81, 0x23, 0x85, 0xd0, 0x9d, 0xe6,
	0xc0, 0x1a, 0x35, 0xb1, 0xb1, 0xd1, 0x14, 0xdc, 0x4c, 0x84, 0x4c, 0x75, 0x9c, 0x41, 0x73, 0xd4,
	0x1a, 0x8f, 0xbd, 0x5d, 0xb6, 0xc7, 0x9b, 0x89, 0x90, 0xe1, 0x12, 0x30, 0xfc, 0xcb, 0x01, 0xa7,
	0xf0, 0xd1, 0x09, 0x38, 0x09, 0x23, 0x51, 0x55, 0xf8, 0x27, 0xbb, 0x11, 0x4f, 0x18, 0x89, 0x0a,
	0xca, 0xb4, 0x81, 0x0d, 0x05, 0x7d, 0x07, 0xae, 0x5a, 0x25, 0xbc, 0x5c, 0x4b, 0x6b, 0xfc, 0xe9,
	0x6e, 0xb8, 0xd3, 0x22, 0xb4, 0xe2, 0x95, 0x1c, 0xb4, 0x82, 0x77, 0xea, 0xa9, 0x94, 0x68, 0x2e,
	0x32, 0xb3, 0x1f, 0xad, 0xf1, 0xa3, 0xdd, 0x97, 0xee, 0x4d, 0x2e, 0x81, 0x4e, 0x35, 0xd1, 0x6a,
	0x6a, 0xe1, 0x2b, 0x7c, 0x14, 0x02, 0x48, 0x16, 0x4b, 0xa6, 0x54, 0x91, 0xcd, 0x31, 0xd9, 0x82,
	0x3d, 0xb2, 0xe1, 0x0d, 0xa4, 0xce, 0xb4, 0xc5, 0xed, 0x3e, 0x81, 0xdb, 0xff, 0x53, 0x0e, 0x7a,
	0x00, 0xae, 0x2a, 0x8c, 0xaa, 0x1d, 0x1f, 0xbe, 0x36, 0xaf, 0xd1, 0xf4, 0x63, 0x46, 0xb5, 0x90,
	0xc1, 0xe1, 0xb3, 0x8b, 0x7e, 0xe3, 0xf9, 0x45, 0xdf, 0xc2, 0x65, 0x70, 0xf7, 0x0c, 0xda, 0x57,
	0xb2, 0xa3, 0x6f, 0x2e, 0x83, 0x3f, 0xbe, 0x19, 0x3c, 0xcb, 0xd3, 0x53, 0x2d, 0x19, 0x49, 0xaf,
	0xb1, 0x83, 0x03, 0x70, 0xce, 0x79, 0x16, 0x06, 0xb7, 0x2a, 0xe0, 0xf0, 0x09, 0x1c, 0x6d, 0xfa,
	0x86, 0x3a, 0x70, 0x2b, 0x62, 0x44, 0xe7, 0x92, 0x99, 0x44, 0x47, 0xb8, 0x76, 0xd1, 0x7b, 0xe0,
	0xae, 0xf8, 0x5a, 0x94, 0xca, 0xb0, 0x70, 0xe9, 0xa0, 0x1e, 0x1c, 0xd2, 0x25, 0x4f, 0x42, 0xc9,
	0x8a, 0xc6, 0x36, 0x47, 0xcd, 0xc0, 0x3e, 0xb6, 0xf0, 0x66, 0x6c, 0xf8, 0xa7, 0x0b, 0x87, 0xb5,
	0xc8, 0x50, 0x0a, 0x6f, 0x57, 0xb4, 0x79, 0xbd, 0x96, 0xe2, 0x14, 0x4c, 0xf7, 0xd3, 0xac, 0xf7,
	0xa8, 0x64, 0x99, 0xfd, 0x79, 0x98, 0x69, 0xf9, 0x14, 0xbf, 0x15, 0x6d, 0x0d, 0xa1, 0xbb, 0x70,
	0xfb, 0x17, 0xc6, 0xe3, 0xa5, 0x9e, 0x13, 0x3d, 0x4f, 0x88, 0xd2, 0x73, 0xb6, 0x26, 0x49, 0x55,
	0xff, 0x71, 0xf9, 0xeb, 0x6b, 0x7d, 0x42, 0x94, 0x7e, 0xb8, 0x26, 0x09, 0xea, 0x43, 0x8b, 0xab,
	0x79, 0xc8, 0x15, 0x59, 0x24, 0x2c, 0x34, 0x32, 0x3d, 0xc4, 0xc0, 0xd5, 0x83, 0x6a, 0xa4, 0xfb,
	0xaf, 0x0d, 0x6e, 0x49, 0x3e, 0x03, 0x9b, 0x66, 0x55, 0x27, 0xbe, 0xba, 0xe1, 0xaa, 0x28, 0xae,
	0x2a, 0x6f, 0x73, 0x43, 0x5d, 0xd6, 0xcb, 0x2c, 0x4f, 0x99, 0xe4, 0x94, 0x24, 0xc1, 0xc1, 0x3f,
	0x17, 0x7d, 0x7b, 0x32, 0x9b, 0x36, 0xb0, 0x4d, 0x33, 0xf4, 0x13, 0xd8, 0x94, 0x56, 0xc7, 0x2f,
	0xd8, 0x93, 0x3d, 0x21, 0x9a, 0xc5, 0x62, 0x9b, 0x3e, 0x31, 0x74, 0x8a, 0x1e, 0x83, 0x2d, 0xeb,
	0x23, 0x78, 0xff, 0x8d, 0xe9, 0xaf, 0xc4, 0x78, 0xa5, 0x6a, 0x6c, 0xaa, 0x96, 0x19, 0xfa, 0x11,
	0x6c, 0x49, 0xab, 0xc3, 0xf6, 0xe5, 0x1e, 0xdc, 0x6b, 0x15, 0x63, 0x53, 0xb1, 0xa4, 0xb5, 0x5e,
	0xbb, 0xbf, 0xc2, 0xbb, 0xd7, 0x1a, 0x8e, 0x8e, 0xa1, 0x79, 0xce, 0x9e, 0x56, 0x52, 0x2d, 0x4c,
	0x84, 0xc1, 0x5d, 0x93, 0x24, 0x67, 0xd5, 0x0e, 0xde, 0xdf, 0x53, 0x5b, 0x26, 0x07, 0x2e, 0x51,
	0x5f, 0xd8, 0x9f, 0x59, 0xc1, 0x6f, 0xcf, 0x5e, 0xf4, 0x1a, 0x7f, 0xbf, 0xe8, 0x59, 0xbf, 0xbf,
	0xec, 0x35, 0x9e, 0xbf, 0xec, 0x35, 0xe0, 0x23, 0x2a, 0xd2, 0x37, 0xa0, 0x07, 0xed, 0x69, 0x8d,
	0xff, 0xbe, 0x78, 0x73, 0xd4, 0xd9, 0xbd, 0xad, 0x37, 0x6a, 0xa1, 0x52, 0xbf, 0x0c, 0xf1, 0x6f,
	0x7c, 0x57, 0x17, 0x07, 0xe6, 0xc1, 0xba, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x5c,
	0x00, 0x83, 0x7f, 0x07, 0x00, 0x00,
}
