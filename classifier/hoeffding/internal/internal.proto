syntax = "proto3";

package blacksquaremedia.reason.classifier.hoeffding;

import "core/core.proto";
import "util/util.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_stringer_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

option go_package = "github.com/bsm/reason/classifier/hoeffding/internal";
option java_package = "com.blacksquaremedia.reason.classifier";
option java_outer_classname = "HoeffdingProtos";

// Tree wraps the tree data.
message Tree {
  // The underlying model.
  core.Model model = 1;

  // The target feature.
  string target = 2;

  // The root nodeRef.
  int64 root = 3;

  // The node registry.
  repeated Node nodes = 4;
}

// Node is a tree node
message Node {
  // Stats for classifications.
  message ClassificationStats {
    util.Vector stats = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  }
  // Stats for regressions.
  message RegressionStats {
    util.NumStream stats = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  }

  // Nodes can be leaf or split nodes.
  oneof kind {
    LeafNode leaf = 1;
    SplitNode split = 2;
  }

  // Observation stats for the node
  oneof stats {
    ClassificationStats classification = 3;
    RegressionStats regression = 4;
  }
}

// SplitNode instances are intermediate nodes within the tree.
message SplitNode {
  // The feature name (predictor).
  string feature = 1;

  // The pivot value for binary splits (numerical predictors).
  double pivot = 2;

  // The child references.
  repeated int64 children = 3 [packed=true];
}

// LeafNode instances are the leaves within the tree.
message LeafNode {
  // Observation stats, but feature.
  map<string, FeatureStats> feature_stats = 1;

  // Weight at the time of the last split evaluation.
  double weight_at_last_eval = 2;

  // Status indicator.
  bool is_disabled = 3;
}

// FeatureStats instances maintain stats based on
// observation of a particular feature.
message FeatureStats {
  message ClassificationNumerical {
    util.NumStreams stats = 1 [(gogoproto.nullable) = false];
  }
  message ClassificationCategorical {
    util.Matrix stats = 1 [(gogoproto.nullable) = false];
  }

  message RegressionNumerical {
    double min = 1; // the minimum observed value
    double max = 2; // the maximum observed value

    message Observation {
      double feature_value = 1; // the value of the predictor feature
      double target_value = 2;  // the value of the target feature
      double weight = 3; // the weight of the observation
    }
    repeated Observation observations = 3 [(gogoproto.nullable) = false];
  }
  message RegressionCategorical {
    util.NumStreams stats = 1 [(gogoproto.nullable) = false];
  }

  oneof kind {
    ClassificationNumerical cn = 1 [(gogoproto.customname)="CN"];
    ClassificationCategorical cc = 2 [(gogoproto.customname)="CC"];
    RegressionNumerical rn = 3 [(gogoproto.customname)="RN"];
    RegressionCategorical rc = 4 [(gogoproto.customname)="RC"];
  }
}
