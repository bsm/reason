// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: classifier/ftrl/internal/internal.proto

package internal // import "github.com/bsm/reason/classifier/ftrl/internal"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import reason "github.com/bsm/reason"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Optimizer wraps the optimizer data.
type Optimizer struct {
	// The underlying model.
	Model *reason.Model `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// The target feature.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The gradient sums.
	Sums []float64 `protobuf:"fixed64,3,rep,packed,name=sums" json:"sums,omitempty"`
	// The weights.
	Weights              []float64 `protobuf:"fixed64,4,rep,packed,name=weights" json:"weights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
}

func (m *Optimizer) Reset()         { *m = Optimizer{} }
func (m *Optimizer) String() string { return proto.CompactTextString(m) }
func (*Optimizer) ProtoMessage()    {}
func (*Optimizer) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_6872d1b663a2ee4b, []int{0}
}
func (m *Optimizer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Optimizer.Unmarshal(m, b)
}
func (m *Optimizer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Optimizer.Marshal(b, m, deterministic)
}
func (dst *Optimizer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Optimizer.Merge(dst, src)
}
func (m *Optimizer) XXX_Size() int {
	return xxx_messageInfo_Optimizer.Size(m)
}
func (m *Optimizer) XXX_DiscardUnknown() {
	xxx_messageInfo_Optimizer.DiscardUnknown(m)
}

var xxx_messageInfo_Optimizer proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Optimizer)(nil), "blacksquaremedia.reason.classifier.ftrl.Optimizer")
}

func init() {
	proto.RegisterFile("classifier/ftrl/internal/internal.proto", fileDescriptor_internal_6872d1b663a2ee4b)
}

var fileDescriptor_internal_6872d1b663a2ee4b = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x6b, 0x5a, 0x8a, 0x6a, 0x98, 0x3c, 0x20, 0xab, 0x83, 0x15, 0x31, 0xd0, 0x2c, 0xd8,
	0x12, 0xf0, 0x04, 0x1d, 0x98, 0x40, 0xa0, 0x88, 0x89, 0xcd, 0x4e, 0x1d, 0xd7, 0x22, 0x8e, 0x8b,
	0xfd, 0x47, 0x48, 0xbc, 0x00, 0x2b, 0x8f, 0xc5, 0xc8, 0xc8, 0x5a, 0xf5, 0x45, 0x50, 0x9c, 0xa2,
	0xb2, 0x54, 0x6c, 0x77, 0xa7, 0xcf, 0xbf, 0x7c, 0x87, 0x67, 0x65, 0x2d, 0x63, 0xb4, 0x95, 0xd5,
	0x41, 0x54, 0x10, 0x6a, 0x61, 0x1b, 0xd0, 0xa1, 0x91, 0x3b, 0xc1, 0x57, 0xc1, 0x83, 0x27, 0x33,
	0x55, 0xcb, 0xf2, 0x39, 0xbe, 0xb4, 0x32, 0x68, 0xa7, 0x17, 0x56, 0xf2, 0xa0, 0x65, 0xf4, 0x0d,
	0xdf, 0x1d, 0xe0, 0xdd, 0x81, 0xe9, 0xc9, 0x36, 0x4f, 0xcf, 0xa6, 0x17, 0xc6, 0xc2, 0xb2, 0x55,
	0xbc, 0xf4, 0x4e, 0x18, 0x6f, 0xbc, 0x48, 0xb1, 0x6a, 0xab, 0xe4, 0x92, 0x49, 0xaa, 0xc7, 0xcf,
	0xde, 0x11, 0x9e, 0xdc, 0xaf, 0xc0, 0x3a, 0xfb, 0xa6, 0x03, 0xb9, 0xc6, 0x87, 0xce, 0x2f, 0x74,
	0x4d, 0x51, 0x86, 0xf2, 0xe3, 0x4b, 0xc6, 0xf7, 0xfd, 0xe1, 0xae, 0xa3, 0x8a, 0x1e, 0x26, 0xa7,
	0x78, 0x0c, 0x32, 0x18, 0x0d, 0xf4, 0x20, 0x43, 0xf9, 0xa4, 0xd8, 0x3a, 0x42, 0xf0, 0x28, 0xb6,
	0x2e, 0xd2, 0x61, 0x36, 0xcc, 0x51, 0x91, 0x34, 0xa1, 0xf8, 0xe8, 0x55, 0x5b, 0xb3, 0x84, 0x48,
	0x47, 0x29, 0xfe, 0xb5, 0x73, 0xf8, 0x5c, 0xb3, 0xc1, 0xf7, 0x9a, 0xa1, 0x8f, 0x0d, 0x1b, 0x7c,
	0x6d, 0xd8, 0x00, 0x9f, 0x97, 0xde, 0xf1, 0xff, 0x57, 0x98, 0xe3, 0x9b, 0xc7, 0xe2, 0xf6, 0xa1,
	0xab, 0x13, 0x9f, 0xf8, 0x9f, 0xfa, 0x2a, 0x3a, 0xd1, 0xd3, 0x62, 0xdf, 0xe8, 0x6a, 0x9c, 0x66,
	0xb8, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xc5, 0xb0, 0x92, 0x97, 0x01, 0x00, 0x00,
}
